//Tarun Arumugam 530001455

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // bitwise not the x input?
        zy, // zero the y input?
        ny, // bitwise not the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // bitwise not the out f?

    OUT 
        out[16], // 16-bit f
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    Mux16(a=x, sel=zx, out=c);
    Not16(in=c, out=d);
    Mux16(a=c, b=d, sel=nx, out=Xsecond);
    Mux16(a=y, sel=zy, out=Yout);
    Not16(in=Yout, out=notY);
    Mux16(a=Yout, b=notY, sel=ny, out=Ysecond);
    Add16(a=Xsecond, b=Ysecond, out=added);
    And16(a=Xsecond, b=Ysecond, out=both);
    Mux16(a=both, b=added, sel=f, out=functionOut);
    Not16(in=functionOut, out=notOut);
    Mux16(a=functionOut, b=notOut, sel=no, out=out, out[15]=o1, out[0..7]=leftOut, out[8..15]=rightOut);
    Or8Way(in=leftOut, out=lo);
    Or8Way(in=rightOut, out=ro);
    Or(a=lo, b=ro, out=nr);
    Not(in=nr, out=zr);
    And(a=o1, b=true, out=ng); 
}